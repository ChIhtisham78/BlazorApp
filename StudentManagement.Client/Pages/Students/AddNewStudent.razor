@page "/add-student"
@using StudentManagement.Client.Services
@using StudentManagement.Shared.Models
@inject NavigationManager navigation
@using StudentManagement.Shared.StudentRepository
@inject IJSRuntime Jsruntime
@inject IStudentRepository StudentService

<div class="card m-5">
    <div class="card-body">
        <EditForm Model="studobj" OnValidSubmit="CreateStudent" OnInvalidSubmit="HandleInvalidSubmit" FormName="addstudent">
            <ValidationSummary />
            <div class="row m-3">
                <div class="col-md-6">
                    <div class="form-group">
                        <label class="control-label"><strong>Name</strong></label>
                        <InputText class="form-control" @bind-Value="studobj.Name" @oninput="ClearNameError" />
                        @if (showNameError)
                        {
                            <span class="text-danger">Name is required.</span>
                        }
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-group">
                        <label class="control-label"><strong>Email</strong></label>
                        <InputText class="form-control" @bind-Value="studobj.Email" @oninput="ClearEmailError" />
                        @if (showEmailError)
                        {
                            <span class="text-danger">Email is required.</span>
                        }
                    </div>
                </div>
            </div>

            <div class="row m-3">
                <div class="col-md-6">
                    <div class="form-group">
                        <label class="control-label"><strong>Country</strong></label>
                        <InputText class="form-control" @bind-Value="studobj.Country" @oninput="ClearCountryError" />
                        @if (showCountryError)
                        {
                            <span class="text-danger">Country is required.</span>
                        }
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-group">
                        <label class="control-label"><strong>Address</strong></label>
                        <InputText class="form-control" @bind-Value="studobj.Address" @oninput="ClearAddressError" />
                        @if (showAddressError)
                        {
                            <span class="text-danger">Address is required.</span>
                        }
                    </div>
                </div>
            </div>

            <div class="row justify-content-center m-3">
                <div class="col-md-6">
                    <div class="form-group">
                        <label class="control-label"><strong>Phone Number</strong></label>
                        <InputText class="form-control" @bind-Value="studobj.PhoneNumber" @oninput="ClearPhoneError" />
                        @if (showPhoneError)
                        {
                            <span class="text-danger">Phone Number is required.</span>
                        }
                    </div>
                </div>
            </div>

            <div class="row justify-content-center mt-4">
                <div class="col-md-6 text-center">
                    <a href="/student-lists" class="btn btn-danger ml-2">Cancel</a>
                    <button class="btn btn-primary ml-2" type="submit">Save</button>
                </div>
            </div>
        </EditForm>
    </div>
</div>

@code {
    public Student studobj { get; set; } = new Student();
    private bool showNameError, showEmailError, showCountryError, showAddressError, showPhoneError;

    protected async Task CreateStudent()
    {
        ResetErrorFlags();

        if (ValidateForm())
        {
            await StudentService.AddStudentAsync(studobj);
            navigation.NavigateTo("/student-lists");
        }
        else
        {
            await StudentService.AddStudentAsync(studobj);
            navigation.NavigateTo("/student-lists");
        }
    }

    private bool ValidateForm()
    {
        bool isValid = true;
        if (string.IsNullOrWhiteSpace(studobj.Name))
        {
            showNameError = true;
            isValid = false;
        }
        if (string.IsNullOrWhiteSpace(studobj.Email))
        {
            showEmailError = true;
            isValid = false;
        }
        if (string.IsNullOrWhiteSpace(studobj.Country))
        {
            showCountryError = true;
            isValid = false;
        }
        if (string.IsNullOrWhiteSpace(studobj.Address))
        {
            showAddressError = true;
            isValid = false;
        }
        if (string.IsNullOrWhiteSpace(studobj.PhoneNumber))
        {
            showPhoneError = true;
            isValid = false;
        }
        return isValid;
    }

    private void ResetErrorFlags()
    {
        showNameError = false;
        showEmailError = false;
        showCountryError = false;
        showAddressError = false;
        showPhoneError = false;
    }

    private void HandleInvalidSubmit()
    {
        // If invalid submit occurs, you can display a message here if needed.
    }

    private void ClearNameError(ChangeEventArgs e) => showNameError = string.IsNullOrWhiteSpace(e.Value?.ToString());
    private void ClearEmailError(ChangeEventArgs e) => showEmailError = string.IsNullOrWhiteSpace(e.Value?.ToString());
    private void ClearCountryError(ChangeEventArgs e) => showCountryError = string.IsNullOrWhiteSpace(e.Value?.ToString());
    private void ClearAddressError(ChangeEventArgs e) => showAddressError = string.IsNullOrWhiteSpace(e.Value?.ToString());
    private void ClearPhoneError(ChangeEventArgs e) => showPhoneError = string.IsNullOrWhiteSpace(e.Value?.ToString());

    private void Cancel()
    {
        navigation.NavigateTo("/student-lists");
    }
}
